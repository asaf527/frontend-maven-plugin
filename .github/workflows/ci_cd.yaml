name: Security Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_sonarcloud:
    runs-on: ubuntu-latest
    steps:
      # Checkout, JDK, Maven installation
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven' 

      - name: Build with Maven
        run: mvn clean package -DskipTests

      # SonarCloud action
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
            -Dsonar.sources=.
            -Dsonar.language=java
            -Dsonar.java.binaries=.
            -Dsonar.qualitygate.wait=true
      
      # SonarCloud prepare and upload report
      - name: Generate Sonar Report
        if: always()
        run: | 
          curl -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" \
          "https://sonarcloud.io/api/measures/component?componentKey=${{ secrets.SONAR_PROJECT }}&metricKeys=new_bugs,new_vulnerabilities,new_code_smells,bugs,vulnerabilities,code_smells,new_coverage,coverage,new_reliability_rating,reliability_rating,new_security_rating,security_rating,new_maintainability_rating,sqale_rating,lines,complexity" \
          -o sonar-report.json

      - name: Upload Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonar-analysis-report
          path: sonar-report.json

  run_snyk_analysis:
    runs-on: ubuntu-latest
    steps:
    
      # Checkout, Maven installation
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven' 

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Test
        run: |
          ls -la 
          ls -la frontend-plugin-core/target/*.jar
          ls -la frontend-maven-plugin/target/*.jar

      # Snyk security analysis and upload report
      - name: Snyk security analysis
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --maven-aggregate-project --severity-threshold=critical --fail-on=all --json-file-output=sync-report.json
        continue-on-error: false
      
      - name: Upload Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Synk-analysis-report
          path: sync-report.json


  dockerfile_with_docker_scout:
    runs-on: ubuntu-latest
    env:
      APP_NAME: frontend-maven-plugin
      VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      
      # Dockerhub authentication, docker scout installation (Docker scout requierments)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Docker Scout
        run: |
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

      # Docker image building and Docker scout commands
      - name: Build Docker image
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.VERSION }} .
          docker tag ${{ env.APP_NAME }}:${{ env.VERSION }} ${{ env.APP_NAME }}:latest

      - name: Docker Scout Scanning
        env:
          DOCKER_SCOUT_HUB_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker scout cves ${{ env.APP_NAME }}:${{ env.VERSION }} --output ./vulns.report
          docker scout cves ${{ env.APP_NAME }}:${{ env.VERSION }} --only-severity critical --exit-code
          docker scout sbom --output ${{ env.APP_NAME }}.sbom ${{ env.APP_NAME }}:${{ env.VERSION }}